{"version":3,"sources":["logo.svg","constants.js","App.js","useInterval.js","serviceWorker.js","index.js"],"names":["module","exports","CANVAS_SIZE","SNAKE_START","APPLE_START","DIRECTIONS","38","40","37","39","App","canvasRef","useRef","useState","snake","setSnake","apple","setApple","dir","setDir","speed","setSpeed","gameOver","setGameOver","createApple","map","_","i","Math","floor","random","checkCollision","piece","snk","segment","gameLoop","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","newSnake","newApple","checkAppleCollision","pop","useEffect","context","current","getContext","setTransform","clearRect","fillStyle","forEach","x","y","fillRect","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","keyCode","moveSnake","className","length","onClick","style","border","ref","width","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.951e14f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","const CANVAS_SIZE = [800, 800];\r\nconst SNAKE_START = [\r\n  [8, 7],\r\n  [8, 8],\r\n];\r\nconst APPLE_START = [8, 3];\r\nconst SCALE = 40;\r\nconst SPEED = 100;\r\nconst DIRECTIONS = {\r\n  38: [0, -1], // up\r\n  40: [0, 1], // down\r\n  37: [-1, 0], // left\r\n  39: [1, 0], // right\r\n};\r\nconst HOOK_SVG =\r\n  'm129.03125 63.3125c0-34.914062-28.941406-63.3125-64.519531-63.3125-35.574219 0-64.511719 28.398438-64.511719 63.3125 0 29.488281 20.671875 54.246094 48.511719 61.261719v162.898437c0 53.222656 44.222656 96.527344 98.585937 96.527344h10.316406c54.363282 0 98.585938-43.304688 98.585938-96.527344v-95.640625c0-7.070312-4.640625-13.304687-11.414062-15.328125-6.769532-2.015625-14.082032.625-17.960938 6.535156l-42.328125 64.425782c-4.847656 7.390625-2.800781 17.3125 4.582031 22.167968 7.386719 4.832032 17.304688 2.792969 22.160156-4.585937l12.960938-19.71875v42.144531c0 35.582032-29.863281 64.527344-66.585938 64.527344h-10.316406c-36.714844 0-66.585937-28.945312-66.585937-64.527344v-162.898437c27.847656-7.015625 48.519531-31.773438 48.519531-61.261719zm-97.03125 0c0-17.265625 14.585938-31.3125 32.511719-31.3125 17.929687 0 32.511719 14.046875 32.511719 31.3125 0 17.261719-14.582032 31.3125-32.511719 31.3125-17.925781 0-32.511719-14.050781-32.511719-31.3125zm0 0';\r\nexport {\r\n  CANVAS_SIZE,\r\n  SNAKE_START,\r\n  APPLE_START,\r\n  SCALE,\r\n  SPEED,\r\n  DIRECTIONS,\r\n  HOOK_SVG,\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useInterval } from './useInterval';\r\nimport {\r\n  CANVAS_SIZE,\r\n  SNAKE_START,\r\n  APPLE_START,\r\n  SCALE,\r\n  SPEED,\r\n  DIRECTIONS,\r\n} from './constants';\r\nimport appleIcon from './logo.svg'; //'./image/Apple.png';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const canvasRef = useRef(null);\r\n  const appleRef = useRef(null);\r\n  const [snake, setSnake] = useState(SNAKE_START);\r\n  const [apple, setApple] = useState(APPLE_START);\r\n  const [dir, setDir] = useState([0, -1]);\r\n  const [speed, setSpeed] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const startGame = () => {\r\n    setSnake(SNAKE_START);\r\n    setApple(APPLE_START);\r\n    setDir([0, -1]);\r\n    setSpeed(SPEED);\r\n    setGameOver(false);\r\n  };\r\n\r\n  const endGame = () => {\r\n    setSpeed(null);\r\n    setGameOver(true);\r\n  };\r\n\r\n  const moveSnake = ({ keyCode }) =>\r\n    keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\r\n\r\n  const createApple = () =>\r\n    apple.map((_, i) => Math.floor((Math.random() * CANVAS_SIZE[i]) / SCALE));\r\n\r\n  const checkCollision = (piece, snk = snake) => {\r\n    if (\r\n      piece[0] * SCALE >= CANVAS_SIZE[0] ||\r\n      piece[0] * SCALE < 0 ||\r\n      piece[1] * SCALE >= CANVAS_SIZE[1] ||\r\n      piece[1] * SCALE < 0\r\n    )\r\n      return true;\r\n    for (const segment of snk) {\r\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const checkAppleCollision = (newSnake) => {\r\n    if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\r\n      let newApple = createApple();\r\n      while (checkCollision(newApple, newSnake)) {\r\n        newApple = createApple();\r\n      }\r\n      setApple(newApple);\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const gameLoop = () => {\r\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\r\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\r\n    snakeCopy.unshift(newSnakeHead);\r\n\r\n    if (checkCollision(newSnakeHead)) endGame();\r\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\r\n\r\n    setSnake(snakeCopy);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const context = canvasRef.current.getContext('2d');\r\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\r\n    context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]);\r\n    context.fillStyle = 'pink';\r\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\r\n    context.fillStyle = 'lightblue';\r\n    context.fillRect(apple[0], apple[1], 1, 1, 40, 40);\r\n  }, [snake, apple, gameOver]);\r\n\r\n  useInterval(() => gameLoop(), speed);\r\n\r\n  return (\r\n    <div\r\n      role='button'\r\n      tabIndex='0'\r\n      onKeyDown={(e) => moveSnake(e)}\r\n      className='gameContainer'>\r\n      <div className='gameInfo'>\r\n        <div>Score：{snake.length}</div>\r\n        <div>Speed：{speed ? speed : 0}</div>\r\n        <button className='startGameBtn' onClick={startGame}>\r\n          Start Game\r\n        </button>\r\n      </div>\r\n      {gameOver && <div className='gameOverInfo'>GAME OVER!!!</div>}\r\n      <canvas\r\n        style={{\r\n          border: '1px solid black',\r\n        }}\r\n        ref={canvasRef}\r\n        width={`${CANVAS_SIZE[0]}px`}\r\n        height={`${CANVAS_SIZE[1]}px`}\r\n      />\r\n      {/*<img\r\n        ref={appleRef}\r\n        src={appleIcon}\r\n        className='hidden'\r\n        style={{ width: `${SCALE}px`, height: `${SCALE}px` }}\r\n        alt='圖片失效就顯示這段文字'\r\n      />*/}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// Custom Hook by Dan Abramov\r\nimport { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}